#!/usr/bin/python

import specest_gendpss
import unittest

import numpy


#matlab output for dpss(32,3)
test_sig = [
[0.00086852159443, 0.00289923550246, 0.00696219869251, 0.01400017329636, 0.02498834427795, 0.04078270765186, 0.06194447839333, 0.08856867376008, 0.12014969068999, 0.15551516147653, 0.19285114867551, 0.22982779666684, 0.26381723314807, 0.29217809692577, 0.31256711849943, 0.32323074790046, 0.32323074790046, 0.31256711849943, 0.29217809692577, 0.26381723314807, 0.22982779666684, 0.19285114867551, 0.15551516147653, 0.12014969068999, 0.08856867376008, 0.06194447839333, 0.04078270765186, 0.02498834427795, 0.01400017329636, 0.00696219869251, 0.00289923550246, 0.00086852159443],
[0.00542000861782, 0.01505003345174, 0.03130493607434, 0.05529981330158, 0.08715449980903, 0.12563964322843, 0.16801389886248, 0.21012734302602, 0.24681913234732, 0.27257734494015, 0.28236856302176, 0.27249812678275, 0.24134106560903, 0.18979530741534, 0.12135256938690, 0.04175059313134, -0.04175059313134, -0.12135256938690, -0.18979530741534, -0.24134106560903, -0.27249812678275, -0.28236856302176, -0.27257734494015, -0.24681913234732, -0.21012734302602, -0.16801389886248, -0.12563964322843, -0.08715449980903, -0.05529981330158, -0.03130493607434, -0.01505003345174, -0.00542000861782],
[0.02284956239140, 0.05154183041159, 0.09111911158254, 0.13870850019609, 0.18881998486823, 0.23392451992124, 0.26562300357436, 0.27622387344293, 0.26042258241302, 0.21671424315996, 0.14819280225724, 0.06249781681460, -0.02915687273998, -0.11373747073822, -0.17861094820090, -0.21379767547560, -0.21379767547560, -0.17861094820090, -0.11373747073822, -0.02915687273998, 0.06249781681460, 0.14819280225724, 0.21671424315996, 0.26042258241302, 0.27622387344293, 0.26562300357436, 0.23392451992124, 0.18881998486823, 0.13870850019609, 0.09111911158254, 0.05154183041159, 0.02284956239140],
[0.07366790177946, 0.13120618772560, 0.19176931901005, 0.24381541891678, 0.27531746512863, 0.27659229596328, 0.24293466664540, 0.17635702427343, 0.08590147105341, -0.01368844498160, -0.10474755730940, -0.17035313050302, -0.19805025642262, -0.18275663584945, -0.12812590505110, -0.04599645229956, 0.04599645229956, 0.12812590505110, 0.18275663584945, 0.19805025642262, 0.17035313050302, 0.10474755730940, 0.01368844498160, -0.08590147105341, -0.17635702427343, -0.24293466664540, -0.27659229596328, -0.27531746512863, -0.24381541891678, -0.19176931901005, -0.13120618772560, -0.07366790177946],
[0.18329261363901, 0.24987106398978, 0.28905283044844, 0.28853427214044, 0.24420007646557, 0.16193955951548, 0.05695538370067, -0.04942067300173, -0.13470086406513, -0.18077107133296, -0.17853364266683, -0.13039946808350, -0.04989856910657, 0.04157122928647, 0.12007253881208, 0.16517885007069, 0.16517885007069, 0.12007253881208, 0.04157122928647, -0.04989856910657, -0.13039946808350, -0.17853364266683, -0.18077107133296, -0.13470086406513, -0.04942067300173, 0.05695538370067, 0.16193955951548, 0.24420007646557, 0.28853427214044, 0.28905283044844, 0.24987106398978, 0.18329261363901],
[0.33458554174357, 0.33703335798303, 0.28277165814769, 0.18254611326012, 0.05891513853491, -0.05944019184006, -0.14525369123053, -0.17997340800711, -0.15875234263015, -0.09167924666997, -0.00085274160713, 0.08590915070148, 0.14295509984339, 0.15403757083562, 0.11682733225338, 0.04340604934644, -0.04340604934644, -0.11682733225338, -0.15403757083562, -0.14295509984339, -0.08590915070148, 0.00085274160713, 0.09167924666997, 0.15875234263015, 0.17997340800711, 0.14525369123053, 0.05944019184006, -0.05891513853491, -0.18254611326012, -0.28277165814769, -0.33703335798303, -0.33458554174357]
]
class TestSequenceFunctions(unittest.TestCase):

	def setUp(self):
		self.N = 32
		self.K = 6
		self.NW = 3
	
	def assertMatrixAlmostEqual(self,first,second,places):
		first = numpy.abs(first)
		second = numpy.abs(second)
		X = first - second
		X = numpy.abs(X)
		CHECK = False
		for m,i in enumerate(X):
			for n,j in enumerate(i):
				if (j >= (1./(10**places))).any():
					CHECK = True
					break
			if CHECK:
				raise self.failureException('%r != %r within %r places. Check A[%i,%i] or B[%i,%i] (indexes starting from 0).' % (first, second, places, m , n, m, n))
	
	def test_gen(self):
		dpss = specest_gendpss.gendpss(N = self.N, K = self.K, NW = self.NW)	
		A = numpy.array(dpss.dpssarray)
		B = numpy.array(test_sig)
		self.assertMatrixAlmostEqual(A,B,places=6)


if __name__ == '__main__':
	unittest.main()

